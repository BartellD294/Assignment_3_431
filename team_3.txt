(* Problem 1 Solution *)
a.  if A then false else B
A false B
_____________________
|   A (\x.\y.y) B   |
---------------------

Specific case examples:
A is false, B is false: false false false -> (\x.\y.y) (\x.\y.y) (\x.\y.y) -> \x.\y.y (false) correct
A is false, B is true:  false false true ->  (\x.\y.y) (\x.\y.y) (\x.\y.x) -> \x.\y.x (true)  correct
A is true,  B is false: true  false false -> (\x.\y.x) (\x.\y.y) (\x.\y.y) -> \x.\y.y (false) correct
A is true,  B is true:  true  false true ->  (\x.\y.x) (\x.\y.y) (\x.\y.x) -> \x.\y.y (false) correct

(* Problem 2 Solution *)
A implies (not B)
"If A is true, then (not B) must also be true"
"P implies Q" -> (not P) or Q
Plug in A and B: (not A) or (not B)
if (not A) then true else (not B)
(not A) (\x.\y. x) (not B)
_____________________________________________________________________
|   (A (\x.\y. y)(\x.\y. x)) (\x.\y. x) (B (\x.\y. y)(\x.\y. x))    |
---------------------------------------------------------------------

Specific case examples:
A is false, B is false: ((\x.\y. y) (\x.\y. y)(\x.\y. x)) (\x.\y. x) ((\x.\y. y) (\x.\y. y)(\x.\y. x)) -> \x.\y.x (true)  correct
A is false, B is true:  ((\x.\y. y) (\x.\y. y)(\x.\y. x)) (\x.\y. x) ((\x.\y. x) (\x.\y. y)(\x.\y. x)) -> \x.\y.x (true)  correct
A is true,  B is false: ((\x.\y. x) (\x.\y. y)(\x.\y. x)) (\x.\y. x) ((\x.\y. y) (\x.\y. y)(\x.\y. x)) -> \x.\y.x (true)  correct
A is true,  B is true:  ((\x.\y. x) (\x.\y. y)(\x.\y. x)) (\x.\y. x) ((\x.\y. x) (\x.\y. y)(\x.\y. x)) -> \x.\y.y (false) correct

(* Problem 3 Solution *)

A XOR B =>
A AND (NOT B) OR (NOT A) AND B

NOT A => (A (\xy.y) (\xy.x))
NOT B => (B (\xy.y) (\xy.x))

Term 1 => A (B (\xy.y) (\xy.x)) (\xy.y)
Term 2 => (A (\xy.y) (\xy.x)) B (\xy.y)

Term 1 OR Term 2 => Final Answer

(A (B (\xy.y) (\xy.x)) (\xy.y)) (\xy.x) ((A (\xy.y) (\xy.x)) B (\xy.y))


(* Problem 4 Solution *)

Base Case:
    n = 0
    ( 2^(n+1) + 1, 2^n + 1 )
    ( 2^(0+1) + 1, 2^0 + 1 )
    ( 2^(1)   + 1, 1 + 1 )
    ( 2   + 1, 2 )
    ( 3, 2 ) HOLDS true

Assume: (x,y) =  ( 2^(n+1) + 1, 2^n + 1 )

Prove: (3x - 2y, x) has form ( 2^(n+1) + 1, 2^n + 1 )

Step: x = 2^(n+1) + 1
      y = 2^n + 1

      ( 3(2^(n+1) + 1) - 2(2^n + 1), 2^(n+1) + 1 ) =>

      ( 3 * 2^(n+1) + 3 - 2 * 2^n - 2, 2^(n+1) + 1 ) =>

      ( 3 * 2^(n+1) - 2 * 2^n + 3 - 2, 2^(n+1) + 1 ) =>

      ( 2 * 2^(n+1) + 1, 2^(n+1) + 1 ) =>

      ( 2^(n+2) + 1, 2^(n+1) + 1)  

      This holds for k = n + 1 which is our step therfore every element of S 
      will hold the form ( 2^(n+1) + 1, 2^n + 1 )

    
(* Problem 5 Solution *)
rev ( inorder ( reflect x ) ) = inorder x (* rev for lists *)

Define base case:
x = []
rev ( inorder ( reflect [] ) ) = inorder []
LHS = rev ( inorder (reflect [] ) ) 
    = rev ( inorder [] )            * by the code of reflect *
    = rev ( [] )                    * by the code of inorder *
    = []                            * empty list, by the code of rev *
RHS = inorder []                    
    = []                            * empty list, by the code of inorder *
LHS = RHS

Induction Hypothesis:
Assume for a list x of length n:
rev (inorder (reflect x)) = inorder x

Induction Step:
Consider a list (a::x) of length n+1:
LHS = rev (inorder (reflect (a::x)))
    = rev (inorder (reflect x @ [a]))       * by the code of reflect *
    = rev (inorder (reflect x) @ [a])       * by the code of inorder *
    = rev ([a] @ inorder (reflect x))       * by the code of rev *
    = rev ([a]) @ rev (inorder (reflect x)) * by code of @ *
    = [a] @ rev (inorder (reflect x))       * by the code of rev *
    = [a] @ inorder x                       * by IH *
RHS = inorder (a::x)
    = [a] @ inorder x                       * by the code of inorder *
LHS = RHS

Since the base case is true and the induction step is true, then the statement
"rev ( inorder ( reflect x ) ) = inorder x" is true by structural induction.


(* Problem 6 Solution *)
postorder ( reflect x ) = rev ( preorder x )

Define Base case:
x = []

LHS = postorder ( reflect [] )
    = postorder []                  * by the code of reflect *
    = []                            * empty list, by the code of preorder *
RHS = rev ( preorder [] )
    = rev []                        * by the code of preorder *
    = []                            * empty list, by the code of rev *
LHS = RHS

Induction Hypothesis:
Assume for a list x of length n:
postorder (reflect x) = rev (preorder x)

Induction Step:
Consider a list (a::x) of length n+1:
LHS = postorder (reflect (a::x))
    = postorder (reflect x @ [a])       * by the code of reflect *
    = postorder (reflect x) @ postorder ([a]) * by the code of postorder *
    = postorder (reflect x) @ [a]       * by the code of postorder *
    = rev (preorder x) @ [a]            * by IH *
RHS = rev (preorder (a::x))
    = rev ([a] @ preorder x)            * by the code of preorder *
    = rev (preorder x) @ rev ([a])      * by the code of rev *
    = rev (preorder x) @ [a]            * by the code of rev *
LHS = RHS

Since the base case is true and the induction step is true, then the statement
"postorder ( reflect x ) = rev ( preorder x )" is true by structural induction.
